name: CI/CD Pipeline

on: push

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  ERICA_HOST: ${{ secrets.ERICA_HOST_STAGING }}

jobs:
  test-webapp:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
      shell: bash

    - name: Cache dependencies
      id: cache-deps-webapp
      uses: actions/cache@v1
      with:
        path: ~/.local/share/virtualenvs
        key: ${{ runner.os }}-deps-webapp-v${{ secrets.CACHE_VERSION }}-${{ hashFiles('webapp/Pipfile.lock') }}

    - name: Install dependencies
      if: steps.cache-deps-webapp.outputs.cache-hit != 'true'
      run: |
        cd webapp
        pipenv install --dev
      shell: bash

    - name: Lint
      run: |
        cd webapp
        # stop the build if there are Python syntax errors or undefined names
        pipenv run flake8 . --count --select=E9,E112,E113,E117,E711,E713,E714,F63,F7,F82 \
                            --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        pipenv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      shell: bash

    - name: Test
      run: |
        cd webapp
        pipenv run pytest | tee ../webapp-test-report.log
      shell: bash

    - name: Archive test logs
      uses: actions/upload-artifact@v1
      with:
        name: webapp-test-report.log
        path: webapp-test-report.log

  test-erica:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
      shell: bash

    - name: Cache dependencies
      id: cache-deps-erica
      uses: actions/cache@v1
      with:
        path: ~/.local/share/virtualenvs
        key: ${{ runner.os }}-deps-erica-v${{ secrets.CACHE_VERSION }}-${{ hashFiles('erica_app/Pipfile.lock') }}

    - name: Install dependencies
      if: steps.cache-deps-erica.outputs.cache-hit != 'true'
      run: |
        cd erica_app
        pipenv install --dev
      shell: bash

    - name: Get Eric binaries
      env:
        ERICA_BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
        AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
        ENDPOINT_URL: ${{ secrets.S3_ENDPOINT_URL }}
      run: |
        cd erica_app
        pipenv run python scripts/load_eric_binaries.py download-eric-cert-and-binaries

    - name: Lint
      run: |
        cd erica_app
        # stop the build if there are Python syntax errors or undefined names
        pipenv run flake8 . --count --select=E9,E112,E113,E117,E711,E713,E714,F63,F7,F82 \
                            --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        pipenv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      shell: bash

    - name: Test
      run: |
        cd erica_app
        pipenv run pytest | tee ../erica-test-report.log
      shell: bash

    - name: Archive test logs
      uses: actions/upload-artifact@v1
      with:
        name: erica-test-report.log
        path: erica-test-report.log

  build-staging:
    needs: [test-webapp, test-erica]

    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Build docker images
      env:
        DOCKER_TAG: ${{ github.run_number }}
        ERICA_BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
        ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
        ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
        ENDPOINT_URL: ${{ secrets.S3_ENDPOINT_URL }}
        ELSTER_DATENLIEFERANT: ${{ secrets.ELSTER_DATENLIEFERANT }}
        ELSTER_HERSTELLER_ID: ${{ secrets.ELSTER_HERSTELLER_ID }}
      run: |
        docker-compose -f docker-compose.ci.yml build
        docker image ls
      shell: bash

    - name: Login to container repository
      uses: docker/login-action@v1
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_PWD }}

    - name: Push images
      run: |
        for IMAGE in web cron erica; do
          docker tag steuerlotse_${IMAGE}:${{ github.run_number }} ${{ env.DOCKER_REGISTRY }}/steuerlotse_${IMAGE}:${{ github.run_number }}
          docker push ${{ env.DOCKER_REGISTRY }}/steuerlotse_${IMAGE}:${{ github.run_number }}
        done
      shell: bash

  deploy-staging:
    needs: [build-staging]

    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Login to container repository
      uses: docker/login-action@v1
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_PWD }}

    - name: Pull deploy image
      run: docker pull ${{ env.DOCKER_REGISTRY }}/steuerlotse_deployment
      shell: bash

    - name: Run deployment
      env:
        NAMESPACE: staging
        IMAGE_TAG: ${{ github.run_number }}
      run: |
        docker run \
        -e DOCKER_REGISTRY='${{ env.DOCKER_REGISTRY }}' \
        -e REGISTRY_PWD='${{ secrets.REGISTRY_PWD }}' \
        -e CERT_PIN='${{ secrets.CERT_PIN_STAGING }}' \
        -e KUBECONFIG_BASE64='${{ secrets.CI_KUBECONFIG_B64 }}' \
        -e ERICA_HOST='${{ env.ERICA_HOST }}' \
        -e ERICA_SSH_KEY='${{ secrets.CI_ERICA_SSH_KEY }}' \
        -e IMAGE_TAG='${{ env.IMAGE_TAG }}' \
        -e NAMESPACE='${{ env.NAMESPACE }}' \
        ${{ env.DOCKER_REGISTRY }}/steuerlotse_deployment
      shell: bash

    - name: Logout of docker container
      run: docker logout ${{ env.DOCKER_REGISTRY }}


  acceptance-test-staging:
    runs-on: ubuntu-latest
    needs: [deploy-staging]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v1

    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-acceptance-test-node-modules-v${{ secrets.CACHE_VERSION }}-${{ hashFiles('acceptance_tests/package-lock.json') }}

    - name: Install dependencies
      run: cd acceptance_tests && npm install
      shell: bash

    - name: Run acceptance tests
      env:
        CYPRESS_STAGING_AUTH_PASSWORD: ${{ secrets.CYPRESS_STAGING_AUTH_PASSWORD }}
        NO_COLOR: 1
      run: cd acceptance_tests && npm run cy:run | tee ../acceptance-test-report.log
      shell: bash

    - name: Archive test logs
      uses: actions/upload-artifact@v1
      with:
        name: acceptance-test-report.log
        path: acceptance-test-report.log

    - name: Archive test screenshots
      uses: actions/upload-artifact@v1
      with:
        name: screenshots
        path: acceptance_tests/cypress/screenshots
      if: ${{ failure() }}

    - name: Archive test videos
      uses: actions/upload-artifact@v1
      with:
        name: videos
        path: acceptance_tests/cypress/videos
      if: ${{ failure() }}ts
